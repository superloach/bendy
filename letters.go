package bendy

const LetterWidth = 5
const LetterHeight = 7

type Letter string

var Letters = map[rune]Letter{
	'a':  "           ... .   .......   ..   .",
	'b':  "          .... .   ..... .   ..... ",
	'c':  "           ... .   ..    .   . ... ",
	'd':  "          .... .   ..   ..   ..... ",
	'e':  "          ......    ...  .    .....",
	'f':  "          ......    ...  .    .    ",
	'g':  "           .....    . ....   . ... ",
	'h':  "          .   ..   .......   ..   .",
	'i':  "          .....  .    .    .  .....",
	'j':  "          .....    .    ..   . ... ",
	'k':  "          .   ..  . ...  .  . .   .",
	'l':  "          .    .    .    .    .....",
	'm':  "          .   ... ... . ..   ..   .",
	'n':  "          .   ...  .. . ..  ...   .",
	'o':  "           ... .   ..   ..   . ... ",
	'p':  "          .... .   ..... .    .    ",
	'q':  "           ... .   .. . ..  .  .. .",
	'r':  "          .... .   ..... .  . .   .",
	's':  "           .....     ...     ..... ",
	't':  "          .....  .    .    .    .  ",
	'u':  "          .   ..   ..   ..   . ... ",
	'v':  "          .   ..   ..   . . .   .  ",
	'w':  "          .   ..   .. . ... ...   .",
	'x':  "          .   . . .   .   . . .   .",
	'y':  "          .   . . .   .    .    .  ",
	'z':  "          .....   .   .   .   .....",
	'A':  " ... .   ..   .......   ..   ..   .",
	'B':  ".... .   ..   ..... .   ..   ..... ",
	'C':  " ... .   ..    .    .    .   . ... ",
	'D':  ".... .   ..   ..   ..   ..   ..... ",
	'E':  "......    .    .... .    .    .....",
	'F':  "......    .    .... .    .    .    ",
	'G':  " ... .   ..    . ....   ..   . ... ",
	'H':  ".   ..   ..   .......   ..   ..   .",
	'I':  ".....  .    .    .    .    .  .....",
	'J':  ".....    .    .    .    ..   . ... ",
	'K':  ".   ..  . . .  ..   . .  .  . .   .",
	'L':  ".    .    .    .    .    .    .....",
	'M':  ".   ... ... . ..   ..   ..   ..   .",
	'N':  ".   ...  .. . ..  ...   ..   ..   .",
	'O':  " ... .   ..   ..   ..   ..   . ... ",
	'P':  ".... .   ..   ..... .    .    .    ",
	'Q':  " ... .   ..   ..   .. . ..  .  .. .",
	'R':  ".... .   ..   ..... . .  .  . .   .",
	'S':  " ... .   ..     ...     ..   . ... ",
	'T':  ".....  .    .    .    .    .    .  ",
	'U':  ".   ..   ..   ..   ..   ..   . ... ",
	'V':  ".   ..   ..   ..   ..   . . .   .  ",
	'W':  ".   ..   ..   ..   .. . ... ...   .",
	'X':  ".   ..   . . .   .   . . .   ..   .",
	'Y':  ".   ..   . . .   .    .    .    .  ",
	'Z':  ".....    .   .   .   .   .    .....",
	'1':  "  .   ..  . .    .    .    .  .....",
	'2':  " ... .   .    .   .   .   .   .....",
	'3':  " ... .   .    .   .     ..   . ... ",
	'4':  ".  . .  . .  . .....   .    .    . ",
	'5':  "......    .    ....     ..   . ... ",
	'6':  " ... .   ..    .... .   ..   . ... ",
	'7':  ".....    .    .   .   .   .   .    ",
	'8':  " ... .   ..   . ... .   ..   . ... ",
	'9':  " ... .   ..   . ....    ..   . ... ",
	'0':  " ... .   ..  ... . ...  ..   . ... ",
	' ':  "                                   ",
	'`':  " .     .                           ",
	'~':  "           .   . . .   .           ",
	'!':  "  .    .    .    .    .         .  ",
	'@':  " ... .   ..  ... . ..  . .     ....",
	'#':  " . .  . . ..... . . ..... . .  . . ",
	'$':  "  .   ..... .   ...   . .....   .  ",
	'%':  "..  ...  .   .   .   .   .  ...  ..",
	'^':  "  .   . . .   .                    ",
	'&':  " .   . .   .   . . ..  . .  .  .. .",
	'*':  ". . . ... ..... ... . . .          ",
	'(':  "   .   .   .    .    .     .     . ",
	')':  " .     .     .    .    .   .   .   ",
	'-':  "               .....               ",
	'_':  "                              .....",
	'=':  "          .....     .....          ",
	'+':  "       .    .  .....  .    .       ",
	'[':  " ...  .    .    .    .    .    ... ",
	'{':  "   .   .    .   .     .    .     . ",
	']':  " ...    .    .    .    .    .  ... ",
	'}':  " .     .    .     .   .    .   .   ",
	'\\': ".    .     .     .     .     .    .",
	'|':  "  .    .    .         .    .    .  ",
	';':  "            .              .   .   ",
	':':  "            .              .       ",
	'\'': "  .    .    .                      ",
	'"':  " . .  . .  . .                     ",
	',':  "                           .   .   ",
	'<':  "         .   .   .     .     .     ",
	'.':  "                           .       ",
	'>':  "     .     .     .   .   .         ",
	'/':  "    .    .   .   .   .   .    .    ",
	'?':  " ... .   .    .   .   .         .  ",
}

func (b *Bendy) letter(r rune, x, y float64, color int) {
	l, ok := Letters[r]
	if !ok {
		l = Letters['#']
	}
	for i := 0; i < len(l); i++ {
		if l[i] == ' ' {
			continue
		}
		b.poke(int(x)+i%LetterWidth, int(y)+i/LetterWidth, color)
	}
}
